<?php
namespace Training4\VendorList\Block;

use Magento\Framework\View\Element\AbstractBlock;
use Magento\Framework\View\Element\Template;

class VendorList extends \Magento\Framework\View\Element\Template
{
    /**
     * @var string
     */
    protected $_defaultToolbarBlock = 'Training4\VendorList\Block\ListVendors\Toolbar';

    /**
     * @var \Training4\Vendor\Model\VendorRepositoryFactory
     */
    protected $_repositoryFactory;

    /**
     * @var \Magento\Framework\Api\SearchCriteriaBuilder
     */
    protected $_searchCriteriaBuilder;

    /**
     * @var \Magento\Framework\Api\FilterBuilder
     */
    protected $_filterBuilder;

    /**
     * @var \Magento\Framework\Registry
     */
    protected $_coreRegistry;

    /**
     * @var \Training4\Vendor\Model\ResourceModel\Vendor\CollectionFactory
     */
    protected $_vendorCollectionFactory;

    public function __construct(
        Template\Context $context,
        array $data = [],
        \Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder,
        \Magento\Framework\Api\FilterBuilder $filterBuilder,
        \Magento\Framework\Registry $coreRegistry,
        \Training4\Vendor\Model\ResourceModel\Vendor\CollectionFactory $collectionFactory,
        \Training4\Vendor\Model\VendorRepositoryFactory $repositoryFactory
    ) {

        parent::__construct($context, $data);

        $this->_searchCriteriaBuilder = $searchCriteriaBuilder;
        $this->_filterBuilder = $filterBuilder;
        $this->_coreRegistry = $coreRegistry;
        $this->_vendorCollectionFactory = $collectionFactory;
        $this->_repositoryFactory = $repositoryFactory;
    }

    /**
     * @return mixed
     */
    public function getProductVendors()
    {
        $vendors = [];
        /** @var \Training4\Vendor\Model\VendorRepository $repository */
        $repository = $this->_repositoryFactory
            ->create();
        //Set filter to search criteria
        $searchCriteria = $this->_searchCriteriaBuilder
            ->create();
        //Pass order criteria with filters to the repository
        $vendors = $repository->getList($searchCriteria)->getItems();
        return $vendors;
    }

    /**
     * @return $this
     */
    protected function _beforeToHtml()
    {
        $toolbar = $this->getToolbarBlock();

        // called prepare sortable parameters
        $collection = $this->_vendorCollectionFactory->create();
        // use sortable parameters
        $toolbar->setAvailableOrders(['name' => 'Name']);
        $orders = $this->getAvailableOrders();
        if ($orders) {
            $toolbar->setAvailableOrders($orders);
        }
        $sort = $this->getSortBy();

        if ($sort) {
            $toolbar->setDefaultOrder(['name']);
        }
        $dir = $this->getDefaultDirection();
        if ($dir) {
            $toolbar->setDefaultDirection($dir);
        }
        $modes = $this->getModes();
        if ($modes) {
            $toolbar->setModes($modes);
        }

        // set collection to toolbar and apply sort
        $toolbar->setCollection($collection);
        $this->setChild('toolbar', $toolbar);

        return parent::_beforeToHtml(); // TODO: Change the autogenerated stub
    }

    /**
     * Retrieve Toolbar block
     *
     * @return \Magento\Catalog\Block\Product\ProductList\Toolbar
     */
    public function getToolbarBlock()
    {
        $blockName = $this->getToolbarBlockName();
        if ($blockName) {
            $block = $this->getLayout()->getBlock($blockName);
            if ($block) {
                return $block;
            }
        }
        $block = $this->getLayout()->createBlock($this->_defaultToolbarBlock, uniqid(microtime()));
        return $block;
    }

}
